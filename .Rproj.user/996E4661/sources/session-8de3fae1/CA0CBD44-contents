---
title: "Capacitated Vehicle Routing Problem"
author: "Yantralogics LLC"
date: "2023-06-09"
output: html_document
---

## 2 index Vehicle Routing Problem Formulation

In this tutorial we will take a look at a couple of formulations for vehicle routing problem. We will first discuss a two index vehicle flow formulation that uses $O(n^2)$ binary variables $x$ to indicate if a vehicle traverses on an arc in the optimal solution. In other words, variable $x_{ij}$ takes the value 1 if arc $(i,j) \in A$ belongs to the optimal solution and takes value 0 otherwise.

We designate cost of travelling on arc $(i,j)$ with $c_{ij}$. In this formulation, the vehicles share a common capacity value $C$. The demand/load at each city is designated by $d_i$. Unless otherwise stated, we will consider node $\{0\}$ to be the origin and final destination. The number of trucks are designated by $K$.

It stands to reason that simplest way to define the cost function is to sum the distance travelled by all the vehicles and all the arcs covered.

$$min \sum_{i \in V} \sum_{j \in V} c_{ij}x_{ij}$$
subject to

$$\sum_{i \in V} x_{ij} = 1 ,\forall j \in V \setminus \{0\}, $$
This constraint assures that except for the origin, each city must be entered exactly once. 

$$\sum_{j \in V} x_{ij} = 1 ,\forall i \in V \setminus \{0\}, $$
This constraint assures that except for the origin , each city will be exited exactly once.

$$\sum_{i \in V} x_{i0} = K,$$
This constraint states that at the origin, exactly $K$ vehicles should return. 

$$\sum_{j \in V} x_{0j} = K,$$
This constraint is required for assuring that from the origin, exactly $K$ vehicles depart.

In addition to these standard constraints, we need to impose subtour elimination constraints. There are multiple ways to write these constraints, but the MTZ formulation for subtour elimination is most intuitive and straight forward to implement in integer programming realm. The central concept is as follows. A new integer variable is introduced $u_i,i \in V \setminus \{0\}$. This represents the load of the vehicle after visiting customer $i$. 

$$u_i - u_j +Cx_{ij} \le C - d_j , \forall i, j \in V \setminus \{0\}$$

$$d_i \le u_i \le C , \forall i \in V \setminus \{0\}$$

Above two constraints impose both the capacity and connectivity requirements. When $x_{ij}=0$, constraint is not binding since $u_i \le C$ and $u_j \ge d_j$. Where as when $x_{ij}=1$, they impose that $u_j \ge u_i + d_j$. 

## AMPL Implementation

Now that we have the equations written down, how shall we implement this in the AMPL? Consider following code chunk.

```ampl
# Two index formulation : 
# n = number of cities
param n>=0;
# k = number of trucks
param K>=0;
# C = capacity of each truck - same capacity
param C >=0;

# Create the set for all the nodes - 0 indicating the depot
set N :=0..n;
# Create the set of arcs 
set A :={i in N,j in N:i<>j};

param c{A}>=0;
# d = demand vector at all the cities except for the depot 
param d{1..n};

# decision variable
var x{A} binary;
# additional decision variable to remove subtours per MTZ formulation
var u{1..n} >=0;

# Objective function is sum of all distances travelled
minimize cost: sum{i in N,j in N:i<>j} c[i,j]*x[i,j];

# Each city must be entered only once
s.t. C1{j in 1..n}:sum{i in N:i<>j} x[i,j]=1;
# Each city must be exited only once
s.t. C2{i in 1..n}:sum{j in N:i<>j} x[i,j]=1;
# From depot, exactly K trucks should depart
s.t. C3:sum{j in 1..n} x[0,j]=K;
# At the depot, exactly K trucks should arrive
s.t. C31:sum{i in 1..n} x[i,0]=K;

# MTZ dictated subtour elimination constraint 1
s.t. C4{i in 1..n,j in 1..n:i<>j}: u[i] - u[j] + C*x[i,j] <= C- d[j];
# MTZ dictated subtour elimination constraint 2 
s.t. C5{i in 1..n}:d[i]<= u[i] <= C;



```


```ampl

```


## 3 index Vehicle Routing Problem formulation

While 2 index VRP formulation is relatively straight forward to implement, it cannot be extended to more complex versions of the VRP. For instance, in the 2 index formulation, we assumed that the capacity of all the trucks is same. In reality that might not be the case. It can be argued that in case there was an explicit index for the trucks, this problem could be solved. 

So let's define a variable $x_{ijk}$ takes the value 1 if vehicle $k$ and  arc $(i,j) \in A$ belongs to the optimal solution and takes value 0 otherwise.You might have noticed that now the computation complexity increased to $O(n^2K)$ In addition to this decision variable, we will introduce $O(nK)$ variable $y_{ik}:(i \in V, k=1..K)$ that takes value 1 if customer $i$ is served by vehicle $k$ in the optimal solution and takes the value 0 otherwise. 

We designate cost of travelling on arc $(i,j)$ with $c_{ij}$. In this formulation, the vehicles share a common capacity value $C$. The demand/load at each city is designated by $d_i$. Unless otherwise stated, we will consider node $\{0\}$ to be the origin and final destination. The number of trucks are designated by $K$.

It stands to reason that simplest way to define the cost function is to sum the distance traveled by all the vehicles and all the arcs covered.

$$min \sum_{i \in V} \sum_{j \in V} c_{ij} \sum_{k=1}^{K} x_{ijk}$$
subject to


$$\sum_{k=1}^{K}y_{ik}=1, \forall i \in V \setminus \{0\},$$
This assures that each city is reached by exactly 1 truck, except for the depot.
$$\sum_{k=1}^{K}y_{0k}=K, $$
This assures that exactly $K$ trucks are reached by the depot.

$$\sum_{j \in V}x_{ijk}=\sum_{j \in V}x_{jik} = y_{ik},\\ \forall i \in V, k = 1,...,K,$$
This is a bit tricky, we want to make sure that truck that enters the city, same truck leaves the city. Notice the double equality constraint here, when we try to implement this in AMPL, we will need to break it apart. 

And finally the subtour elimination constraint based on MTZ formulation written to include $k$ index in variable $u_{ik}$. Notice that given $k$ index, we can now allocate separate capacities of individual trucks $C_k, k= 1,...,K$.

$$u_{ik}- u_{jk} + C_kx_{ijk}\le C_k - d_j,\\ \forall i,j \in V \setminus \{0\}, i \ne j, k = 1,...,K,$$

$$d_i \le u_{ik} \le C_k,\\ \forall i \in V \setminus \{0\}, k = 1,...,K$$
Note that for while going from 2 index to 3 index formulation, we went from $O(n^2 + n)$ to $O(n^2K+2nK)$ complexity. Needless to say that flexibility of having a dedicated index for the truck requires us to pay price on computation. 

### AMPL Implementation
```ampl
## 3 index formulation 
#number of customers
param v; 

#customers - where 1 is the depot
set V:={1..v}; 
#number of vehicles
param l;

set K=1..l; #number of vehicles
param Distance{V,V};
param Capacity{K};
param Demand{V};
var  x{i in V,j in V,k in K} ,binary;
var y{i in V, k in K} binary;
var  u{1..v, k in K} integer;

# Objective setting : minimize the total distance travelled
minimize obj: sum{k in K,i in V,j in V: i<>j} Distance[i,j]*x[i,j,k];

# EAch vehicle entes the city exactly once
subject to R1{i in 2..v}: sum{k in K}y[i,k]==1;

subject to R2:sum{k in K}y[1,k]=l;


subject to R31{i in V, k in K}:sum{j in V}x[i,j,k]=sum{j in V}x[j,i,k];

subject to R32{i in V,k in K}:sum{j in V}x[j,i,k]=y[i,k];


subject to R4{k in K}:sum{i in V}Demand[i]*y[i,k]<=Capacity[k];


subject to R5{i in 2..v,j in 2..v, k in K}:u[i,k]-u[j,k]+Capacity[k]*x[i,j,k] <= Capacity[k]-Demand[j];

subject to R6{i in 2..v, k in K}:Demand[i]<=u[i,k]<=Capacity[k];
  
```
